// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"
	"structs"

	"github.com/cilium/ebpf"
)

type pipe_trackerEvent struct {
	_    structs.HostLayout
	Pid  uint32
	_    [4]byte
	Ts   uint64
	Comm [16]int8
	Type int8
	_    [7]byte
}

// loadPipe_tracker returns the embedded CollectionSpec for pipe_tracker.
func loadPipe_tracker() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Pipe_trackerBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load pipe_tracker: %w", err)
	}

	return spec, err
}

// loadPipe_trackerObjects loads pipe_tracker and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*pipe_trackerObjects
//	*pipe_trackerPrograms
//	*pipe_trackerMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPipe_trackerObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPipe_tracker()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// pipe_trackerSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pipe_trackerSpecs struct {
	pipe_trackerProgramSpecs
	pipe_trackerMapSpecs
	pipe_trackerVariableSpecs
}

// pipe_trackerProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pipe_trackerProgramSpecs struct {
	KprobeExit *ebpf.ProgramSpec `ebpf:"kprobe_exit"`
	TraceClose *ebpf.ProgramSpec `ebpf:"trace_close"`
	TraceDup2  *ebpf.ProgramSpec `ebpf:"trace_dup2"`
	TraceRead  *ebpf.ProgramSpec `ebpf:"trace_read"`
	TraceWrite *ebpf.ProgramSpec `ebpf:"trace_write"`
}

// pipe_trackerMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pipe_trackerMapSpecs struct {
	PipeReaders *ebpf.MapSpec `ebpf:"pipe_readers"`
	PipeReads   *ebpf.MapSpec `ebpf:"pipe_reads"`
	PipeWriters *ebpf.MapSpec `ebpf:"pipe_writers"`
	PipeWrites  *ebpf.MapSpec `ebpf:"pipe_writes"`
}

// pipe_trackerVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pipe_trackerVariableSpecs struct {
}

// pipe_trackerObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPipe_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type pipe_trackerObjects struct {
	pipe_trackerPrograms
	pipe_trackerMaps
	pipe_trackerVariables
}

func (o *pipe_trackerObjects) Close() error {
	return _Pipe_trackerClose(
		&o.pipe_trackerPrograms,
		&o.pipe_trackerMaps,
	)
}

// pipe_trackerMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPipe_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type pipe_trackerMaps struct {
	PipeReaders *ebpf.Map `ebpf:"pipe_readers"`
	PipeReads   *ebpf.Map `ebpf:"pipe_reads"`
	PipeWriters *ebpf.Map `ebpf:"pipe_writers"`
	PipeWrites  *ebpf.Map `ebpf:"pipe_writes"`
}

func (m *pipe_trackerMaps) Close() error {
	return _Pipe_trackerClose(
		m.PipeReaders,
		m.PipeReads,
		m.PipeWriters,
		m.PipeWrites,
	)
}

// pipe_trackerVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadPipe_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type pipe_trackerVariables struct {
}

// pipe_trackerPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPipe_trackerObjects or ebpf.CollectionSpec.LoadAndAssign.
type pipe_trackerPrograms struct {
	KprobeExit *ebpf.Program `ebpf:"kprobe_exit"`
	TraceClose *ebpf.Program `ebpf:"trace_close"`
	TraceDup2  *ebpf.Program `ebpf:"trace_dup2"`
	TraceRead  *ebpf.Program `ebpf:"trace_read"`
	TraceWrite *ebpf.Program `ebpf:"trace_write"`
}

func (p *pipe_trackerPrograms) Close() error {
	return _Pipe_trackerClose(
		p.KprobeExit,
		p.TraceClose,
		p.TraceDup2,
		p.TraceRead,
		p.TraceWrite,
	)
}

func _Pipe_trackerClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pipe_tracker_x86_bpfel.o
var _Pipe_trackerBytes []byte
